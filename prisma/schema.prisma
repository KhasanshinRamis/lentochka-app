// prisma/schema.prisma
datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    ADMIN
    USER
    BUSINESSMAN
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id                    String                 @id @default(cuid())
    name                  String?
    email                 String?                @unique
    image                 String?
    password              String?
    emailVerified         DateTime?
    role                  UserRole               @default(USER)
    accounts              Account[]
    isTwoFactorEnabled    Boolean                @default(false)
    twoFactorConfirmation TwoFactorConfirmation?
    wishlists             Wishlist[]
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id String @id @default(cuid())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model Wishlist {
    id String @id @default(cuid())

    userId String
    user   User   @relation(fields: [userId], references: [id])

    links    Link[]
    hashtags Hashtag[]

    @@unique([userId, id])
}

model Link {
    id         String   @id @default(cuid())
    url        String
    wishlistId String
    wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

    @@index([wishlistId])
}

model Hashtag {
    id         String   @id @default(cuid())
    tag        String
    wishlistId String
    wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

    @@index([wishlistId])
}
